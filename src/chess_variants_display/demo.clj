(ns chess-variants-display.demo
  (:require [chess-variants-display.core :refer [checkerboard]]))

(defn generate-demo-html
  "Generate the demo HTML page with multiple color themes."
  []
  (let [board-svg (checkerboard 8 8 :dark)]
    (str "<!DOCTYPE html>\n"
         "<html>\n"
         "<head>\n"
         "    <meta charset=\"UTF-8\">\n"
         "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
         "    <title>CSS-Responsive Checkerboard Demo</title>\n"
         "    <style>\n"
         "        body {\n"
         "            font-family: Arial, sans-serif;\n"
         "            max-width: 800px;\n"
         "            margin: 20px auto;\n"
         "            padding: 20px;\n"
         "        }\n"
         "        \n"
         "        .board-container {\n"
         "            margin: 20px 0;\n"
         "            padding: 20px;\n"
         "            border: 1px solid #ccc;\n"
         "            border-radius: 8px;\n"
         "        }\n"
         "        \n"
         "        h2 {\n"
         "            margin-top: 0;\n"
         "        }\n"
         "        \n"
         "        /* Default chess colors */\n"
         "        .chess .dark-square { fill: #769656; }\n"
         "        .chess .light-square { fill: #eeeed2; }\n"
         "        \n"
         "        /* Red/White theme */\n"
         "        .red-white .dark-square { fill: #d32f2f; }\n"
         "        .red-white .light-square { fill: #ffffff; }\n"
         "        \n"
         "        /* Blue/Gold theme */\n"
         "        .blue-gold .dark-square { fill: #1565c0; }\n"
         "        .blue-gold .light-square { fill: #ffd54f; }\n"
         "        \n"
         "        /* Dark mode */\n"
         "        .dark-mode .dark-square { fill: #2c2c2c; }\n"
         "        .dark-mode .light-square { fill: #5c5c5c; }\n"
         "        \n"
         "        /* Brown wood theme */\n"
         "        .wood .dark-square { fill: #b58863; }\n"
         "        .wood .light-square { fill: #f0d9b5; }\n"
         "    </style>\n"
         "</head>\n"
         "<body>\n"
         "    <h1>CSS-Responsive Checkerboard Demonstration</h1>\n"
         "    <p>This demonstrates how the same SVG checkerboard can be styled differently using CSS classes.</p>\n"
         "    \n"
         "    <div class=\"board-container chess\">\n"
         "        <h2>Standard Chess Colors</h2>\n"
         "        " board-svg "\n"
         "    </div>\n"
         "    \n"
         "    <div class=\"board-container red-white\">\n"
         "        <h2>Red & White Theme</h2>\n"
         "        " board-svg "\n"
         "    </div>\n"
         "    \n"
         "    <div class=\"board-container blue-gold\">\n"
         "        <h2>Blue & Gold Theme</h2>\n"
         "        " board-svg "\n"
         "    </div>\n"
         "    \n"
         "    <div class=\"board-container dark-mode\">\n"
         "        <h2>Dark Mode Theme</h2>\n"
         "        " board-svg "\n"
         "    </div>\n"
         "    \n"
         "    <div class=\"board-container wood\">\n"
         "        <h2>Brown Wood Theme</h2>\n"
         "        " board-svg "\n"
         "    </div>\n"
         "</body>\n"
         "</html>")))

(defn -main
  "Generate the demo HTML file in the docs folder"
  [& args]
  (let [output-dir "docs"
        output-file (str output-dir "/index.html")]
    ;; Create docs directory if it doesn't exist
    (.mkdir (java.io.File. output-dir))
    ;; Generate and write the demo HTML
    (spit output-file (generate-demo-html))
    (println (str "Generated demo HTML: " output-file))))
